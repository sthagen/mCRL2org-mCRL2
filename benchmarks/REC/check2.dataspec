sort Xbool = struct
  Xtrue
| Xfalse ;

map
  notBool : Xbool -> Xbool ;
  andBool : Xbool # Xbool -> Xbool ;
  orBool : Xbool # Xbool -> Xbool ;
  xorBool : Xbool # Xbool -> Xbool ;
  impliesBool : Xbool # Xbool -> Xbool ;
  iffBool : Xbool # Xbool -> Xbool ;
  eqBool : Xbool # Xbool -> Xbool ;
  neBool : Xbool # Xbool -> Xbool ;
var
  P, Q : Xbool ;
eqn
  notBool (Xtrue) = Xfalse ;
  notBool (Xfalse) = Xtrue ;
  andBool (P, Xtrue) = P ;
  andBool (P, Xfalse) = Xfalse ;
  orBool (P, Xtrue) = Xtrue ;
  orBool (P, Xfalse) = P ;
  xorBool (P, Q) = orBool (andBool (P, notBool (Q)), andBool (Q, notBool (P))) ;
  impliesBool (P, Q) = orBool (Q, notBool (P)) ;
  iffBool (P, Q) = andBool (impliesBool (P, Q), impliesBool (Q, P)) ;
  eqBool (P, Q) = iffBool (P, Q) ;
  neBool (P, Q) = xorBool (P, Q) ;
