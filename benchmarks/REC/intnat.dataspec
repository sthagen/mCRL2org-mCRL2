sort Xbool = struct
  Xfalse
| Xtrue ;

sort Xnat = struct
  n0
| succNat (Xnat) ;

sort Xint = struct
  posInt (Xnat)
| negInt (Xnat) ;

map
  notBool : Xbool -> Xbool ;
  andBool : Xbool # Xbool -> Xbool ;
  orBool : Xbool # Xbool -> Xbool ;
  xorBool : Xbool # Xbool -> Xbool ;
  n1 : Xnat ;
  n2 : Xnat ;
  n3 : Xnat ;
  n4 : Xnat ;
  n5 : Xnat ;
  n6 : Xnat ;
  n7 : Xnat ;
  n8 : Xnat ;
  n9 : Xnat ;
  n10 : Xnat ;
  n11 : Xnat ;
  n12 : Xnat ;
  n13 : Xnat ;
  n14 : Xnat ;
  n15 : Xnat ;
  n16 : Xnat ;
  n17 : Xnat ;
  n18 : Xnat ;
  n19 : Xnat ;
  n20 : Xnat ;
  n21 : Xnat ;
  n22 : Xnat ;
  eqNat : Xnat # Xnat -> Xbool ;
  ltNat : Xnat # Xnat -> Xbool ;
  gtNat : Xnat # Xnat -> Xbool ;
  evenNat : Xnat -> Xbool ;
  oddNat : Xnat -> Xbool ;
  predNat : Xnat -> Xnat ;
  maxNat : Xnat # Xnat -> Xnat ;
  minNat : Xnat # Xnat -> Xnat ;
  addNat : Xnat # Xnat -> Xnat ;
  subNat : Xnat # Xnat -> Xnat ;
  mulNat : Xnat # Xnat -> Xnat ;
  powNat : Xnat # Xnat -> Xnat ;
  divNat : Xnat # Xnat -> Xnat ;
  adivNat : Xnat # Xnat # Xnat # Xnat -> Xnat ;
  cdivNat : Xnat # Xnat -> Xnat ;
  modNat : Xnat # Xnat -> Xnat ;
  amodNat : Xnat # Xnat # Xnat # Xnat -> Xnat ;
  cmodNat : Xnat # Xnat -> Xnat ;
  i0 : Xint ;
  i1 : Xint ;
  i2 : Xint ;
  i3 : Xint ;
  i4 : Xint ;
  i5 : Xint ;
  i6 : Xint ;
  i7 : Xint ;
  i8 : Xint ;
  i9 : Xint ;
  i10 : Xint ;
  i11 : Xint ;
  i12 : Xint ;
  i13 : Xint ;
  i14 : Xint ;
  i15 : Xint ;
  i16 : Xint ;
  i17 : Xint ;
  i18 : Xint ;
  i19 : Xint ;
  i20 : Xint ;
  i21 : Xint ;
  i22 : Xint ;
  im1 : Xint ;
  im2 : Xint ;
  im3 : Xint ;
  im4 : Xint ;
  im5 : Xint ;
  im6 : Xint ;
  im7 : Xint ;
  im8 : Xint ;
  im9 : Xint ;
  im10 : Xint ;
  im11 : Xint ;
  im12 : Xint ;
  im13 : Xint ;
  im14 : Xint ;
  im15 : Xint ;
  im16 : Xint ;
  im17 : Xint ;
  im18 : Xint ;
  im19 : Xint ;
  im20 : Xint ;
  im21 : Xint ;
  im22 : Xint ;
  eqInt : Xint # Xint -> Xbool ;
  ltInt : Xint # Xint -> Xbool ;
  evenInt : Xint -> Xbool ;
  oddInt : Xint -> Xbool ;
  absInt : Xint -> Xnat ;
  succInt : Xint -> Xint ;
  predInt : Xint -> Xint ;
  minusInt : Xint -> Xint ;
  addInt : Xint # Xint -> Xint ;
  subInt : Xint # Xint -> Xint ;
  mulInt : Xint # Xint -> Xint ;
  divInt : Xint # Xint -> Xint ;
  modInt : Xint # Xint -> Xint ;
  remInt : Xint # Xint -> Xint ;
  check_divNat : Xnat # Xnat # Xnat -> Xbool ;
  check_modNat : Xnat # Xnat # Xnat -> Xbool ;
  check_mulInt : Xint # Xint # Xint -> Xbool ;
  check_divInt : Xint # Xint # Xint -> Xbool ;
  check_modInt : Xint # Xint # Xint -> Xbool ;
  check_remInt : Xint # Xint # Xint -> Xbool ;
var
  L : Xbool ;
  N, N_prime, Np, Nq : Xnat ;
  I, I_prime : Xint ;
  I_prime_prime : Xint ;
eqn
  notBool (Xfalse) = Xtrue ;
  notBool (Xtrue) = Xfalse ;
  andBool (Xfalse, L) = Xfalse ;
  andBool (Xtrue, L) = L ;
  orBool (Xfalse, L) = L ;
  orBool (Xtrue, L) = Xtrue ;
  xorBool (Xfalse, L) = L ;
  xorBool (Xtrue, L) = notBool (L) ;
  n1 = succNat (n0) ;
  n2 = succNat (n1) ;
  n3 = succNat (n2) ;
  n4 = succNat (n3) ;
  n5 = succNat (n4) ;
  n6 = succNat (n5) ;
  n7 = succNat (n6) ;
  n8 = succNat (n7) ;
  n9 = succNat (n8) ;
  n10 = succNat (n9) ;
  n11 = succNat (n10) ;
  n12 = succNat (n11) ;
  n13 = succNat (n12) ;
  n14 = succNat (n13) ;
  n15 = succNat (n14) ;
  n16 = succNat (n15) ;
  n17 = succNat (n16) ;
  n18 = succNat (n17) ;
  n19 = succNat (n18) ;
  n20 = succNat (n19) ;
  n21 = succNat (n20) ;
  n22 = succNat (n21) ;
  eqNat (n0, n0) = Xtrue ;
  eqNat (n0, succNat (N_prime)) = Xfalse ;
  eqNat (succNat (N), n0) = Xfalse ;
  eqNat (succNat (N), succNat (N_prime)) = eqNat (N, N_prime) ;
  ltNat (n0, n0) = Xfalse ;
  ltNat (n0, succNat (N_prime)) = Xtrue ;
  ltNat (succNat (N), n0) = Xfalse ;
  ltNat (succNat (N), succNat (N_prime)) = ltNat (N, N_prime) ;
  gtNat (n0, n0) = Xfalse ;
  gtNat (n0, succNat (N_prime)) = Xfalse ;
  gtNat (succNat (N), n0) = Xtrue ;
  gtNat (succNat (N), succNat (N_prime)) = gtNat (N, N_prime) ;
  evenNat (n0) = Xtrue ;
  evenNat (succNat (N)) = oddNat (N) ;
  oddNat (n0) = Xfalse ;
  oddNat (succNat (N)) = evenNat (N) ;
  predNat (succNat (N)) = N ;
  gtNat (N, N_prime) == Xtrue -> maxNat (N, N_prime) = N ;
  notBool (gtNat (N, N_prime)) == Xtrue -> maxNat (N, N_prime) = N_prime ;
  ltNat (N, N_prime) == Xtrue -> minNat (N, N_prime) = N ;
  notBool (ltNat (N, N_prime)) == Xtrue -> minNat (N, N_prime) = N_prime ;
  addNat (N, n0) = N ;
  addNat (N, succNat (N_prime)) = addNat (succNat (N), N_prime) ;
  subNat (N, n0) = N ;
  subNat (succNat (N), succNat (N_prime)) = subNat (N, N_prime) ;
  mulNat (N, n0) = n0 ;
  mulNat (N, succNat (N_prime)) = addNat (N, mulNat (N, N_prime)) ;
  powNat (N, n0) = n1 ;
  powNat (n0, succNat (N)) = n0 ;
  powNat (N, succNat (N_prime)) = mulNat (powNat (N, N_prime), N) ;
  divNat (N, succNat (N_prime)) = adivNat (N, succNat (N_prime), n0, succNat (N_prime)) ;
  adivNat (n0, n0, Nq, N_prime) = succNat (Nq) ;
  adivNat (n0, succNat (Np), Nq, N_prime) = Nq ;
  adivNat (succNat (N), n0, Nq, N_prime) = adivNat (succNat (N), N_prime, succNat (Nq), N_prime) ;
  adivNat (succNat (N), succNat (Np), Nq, N_prime) = adivNat (N, Np, Nq, N_prime) ;
  andBool (notBool (eqNat (N_prime, n0)), ltNat (N, N_prime)) == Xtrue -> cdivNat (N, N_prime) = n0 ;
  andBool (notBool (eqNat (N_prime, n0)), notBool (ltNat (N, N_prime))) == Xtrue -> cdivNat (N, N_prime) = succNat (cdivNat (subNat (N, N_prime), N_prime)) ;
  modNat (N, succNat (N_prime)) = amodNat (N, succNat (N_prime), n0, succNat (N_prime)) ;
  amodNat (n0, n0, Nq, N_prime) = n0 ;
  amodNat (n0, succNat (Np), Nq, N_prime) = subNat (N_prime, succNat (Np)) ;
  amodNat (succNat (N), n0, Nq, N_prime) = amodNat (succNat (N), N_prime, succNat (Nq), N_prime) ;
  amodNat (succNat (N), succNat (Np), Nq, N_prime) = amodNat (N, Np, Nq, N_prime) ;
  andBool (notBool (eqNat (N_prime, n0)), ltNat (N, N_prime)) == Xtrue -> cmodNat (N, N_prime) = N ;
  andBool (notBool (eqNat (N_prime, n0)), notBool (ltNat (N, N_prime))) == Xtrue -> cmodNat (N, N_prime) = cmodNat (subNat (N, N_prime), N_prime) ;
  i0 = posInt (n0) ;
  i1 = posInt (n1) ;
  i2 = posInt (n2) ;
  i3 = posInt (n3) ;
  i4 = posInt (n4) ;
  i5 = posInt (n5) ;
  i6 = posInt (n6) ;
  i7 = posInt (n7) ;
  i8 = posInt (n8) ;
  i9 = posInt (n9) ;
  i10 = posInt (n10) ;
  i11 = posInt (n11) ;
  i12 = posInt (n12) ;
  i13 = posInt (n13) ;
  i14 = posInt (n14) ;
  i15 = posInt (n15) ;
  i16 = posInt (n16) ;
  i17 = posInt (n17) ;
  i18 = posInt (n18) ;
  i19 = posInt (n19) ;
  i20 = posInt (n20) ;
  i21 = posInt (n21) ;
  i22 = posInt (n22) ;
  im1 = negInt (n0) ;
  im2 = negInt (n1) ;
  im3 = negInt (n2) ;
  im4 = negInt (n3) ;
  im5 = negInt (n4) ;
  im6 = negInt (n5) ;
  im7 = negInt (n6) ;
  im8 = negInt (n7) ;
  im9 = negInt (n8) ;
  im10 = negInt (n9) ;
  im11 = negInt (n10) ;
  im12 = negInt (n11) ;
  im13 = negInt (n12) ;
  im14 = negInt (n13) ;
  im15 = negInt (n14) ;
  im16 = negInt (n15) ;
  im17 = negInt (n16) ;
  im18 = negInt (n17) ;
  im19 = negInt (n18) ;
  im20 = negInt (n19) ;
  im21 = negInt (n20) ;
  im22 = negInt (n21) ;
  eqInt (posInt (N), posInt (N_prime)) = eqNat (N, N_prime) ;
  eqInt (posInt (N), negInt (N_prime)) = Xfalse ;
  eqInt (negInt (N), posInt (N_prime)) = Xfalse ;
  eqInt (negInt (N), negInt (N_prime)) = eqNat (N, N_prime) ;
  ltInt (posInt (N), posInt (N_prime)) = ltNat (N, N_prime) ;
  ltInt (posInt (N), negInt (N_prime)) = Xfalse ;
  ltInt (negInt (N), posInt (N_prime)) = Xtrue ;
  ltInt (negInt (N), negInt (N_prime)) = ltNat (N_prime, N) ;
  evenInt (posInt (N)) = evenNat (N) ;
  evenInt (negInt (N)) = oddNat (N) ;
  oddInt (posInt (N)) = oddNat (N) ;
  oddInt (negInt (N)) = evenNat (N) ;
  absInt (posInt (N)) = N ;
  absInt (negInt (N)) = succNat (N) ;
  succInt (posInt (N)) = posInt (succNat (N)) ;
  succInt (negInt (n0)) = posInt (n0) ;
  succInt (negInt (succNat (N))) = negInt (N) ;
  predInt (posInt (n0)) = negInt (n0) ;
  predInt (posInt (succNat (N))) = posInt (N) ;
  predInt (negInt (N)) = negInt (succNat (N)) ;
  minusInt (posInt (n0)) = posInt (n0) ;
  minusInt (posInt (succNat (N))) = negInt (N) ;
  minusInt (negInt (N)) = posInt (succNat (N)) ;
  addInt (posInt (n0), I) = I ;
  addInt (posInt (succNat (N)), I) = addInt (posInt (N), succInt (I)) ;
  addInt (negInt (n0), I) = predInt (I) ;
  addInt (negInt (succNat (N)), I) = addInt (negInt (N), predInt (I)) ;
  subInt (I, I_prime) = addInt (I, minusInt (I_prime)) ;
  mulInt (posInt (N), posInt (N_prime)) = posInt (mulNat (N, N_prime)) ;
  mulInt (posInt (N), negInt (N_prime)) = minusInt (posInt (mulNat (N, succNat (N_prime)))) ;
  mulInt (negInt (N), posInt (N_prime)) = minusInt (posInt (mulNat (succNat (N), N_prime))) ;
  mulInt (negInt (N), negInt (N_prime)) = posInt (mulNat (succNat (N), succNat (N_prime))) ;
  divInt (posInt (N), posInt (N_prime)) = posInt (divNat (N, N_prime)) ;
  divInt (posInt (N), negInt (N_prime)) = minusInt (posInt (divNat (N, succNat (N_prime)))) ;
  divInt (negInt (N), posInt (N_prime)) = minusInt (posInt (divNat (succNat (N), N_prime))) ;
  divInt (negInt (N), negInt (N_prime)) = posInt (divNat (succNat (N), succNat (N_prime))) ;
  modInt (posInt (N), posInt (N_prime)) = posInt (modNat (N, N_prime)) ;
  modInt (posInt (N), negInt (N_prime)) = minusInt (posInt (modNat (subNat (succNat (N_prime), modNat (N, succNat (N_prime))), succNat (N_prime)))) ;
  modInt (negInt (N), posInt (N_prime)) = posInt (modNat (subNat (N_prime, modNat (succNat (N), N_prime)), N_prime)) ;
  modInt (negInt (N), negInt (N_prime)) = minusInt (posInt (modNat (succNat (N), succNat (N_prime)))) ;
  remInt (posInt (N), I_prime) = posInt (modNat (N, absInt (I_prime))) ;
  remInt (negInt (N), I_prime) = minusInt (posInt (modNat (succNat (N), absInt (I_prime)))) ;
  check_divNat (N, N_prime, Nq) = andBool (eqNat (divNat (N, N_prime), Nq), eqNat (cdivNat (N, N_prime), Nq)) ;
  check_modNat (N, N_prime, Nq) = andBool (eqNat (modNat (N, N_prime), Nq), eqNat (cmodNat (N, N_prime), Nq)) ;
  check_mulInt (I, I_prime, I_prime_prime) = eqInt (mulInt (I, I_prime), I_prime_prime) ;
  check_divInt (I, I_prime, I_prime_prime) = eqInt (divInt (I, I_prime), I_prime_prime) ;
  check_modInt (I, I_prime, I_prime_prime) = eqInt (modInt (I, I_prime), I_prime_prime) ;
  check_remInt (I, I_prime, I_prime_prime) = eqInt (remInt (I, I_prime), I_prime_prime) ;
