#!/bin/bash
#
# Copyright: Wieger Wesselink <j.w.wesselink@tue.nl> 2014-2024
#
# This script is used for building debian packages.
#
# Preparation
# -----------
# It is assumed that the following environment variables are set:
#
# - BOOST_ROOT   the location of Boost
#
# Before calling the script, do the following steps:
#
# * Update the MCRL2_MAJOR_VERSION variable in the file cmake/MCRL2Version.cmake".
# * Update the MCRL2_VERSION and UBUNTU_VERSION variables below.
# * Update the copyright period in the file COPYING."
# * Make sure that all changes are committed.
#
# To speed up pbuilder, one can create a .pbuilderrc configuration file containing:
#
# DEB_BUILD_OPTIONS="parallel=8"
# APTCACHEHARDLINK=no
#
# Please run this script in an empty directory.
#
# The commands at the end are all commented out. It's a good idea to do the steps
# incrementally, to make sure everything works. Please make sure to do the optional
# steps test_debian_package and simulate_ppa_upload before making a call to
# do_ppa_upload. If these steps fail, it makes no sense to do an upload. After
# every failed upload attempt the version number needs to be updated.

MCRL2_RELEASE_BRANCH="release-202507"
MCRL2_VERSION="202507.0"
UBUNTU_VERSION="1ubuntu1ppa1"
DEBEMAIL="m.laveaux@tue.nl"
DEBFULLNAME="Maurice Laveaux"

#-----------------------------------------------------------#
# Setup
#-----------------------------------------------------------#
set +x
# N.B. Do not call this variable PWD, since it is overwritten during the LTSMin installation!
MYPWD=`pwd`
MCRL2_ROOT=$MYPWD/mcrl2
MCRL2_RELEASE_DIR=$MYPWD/mcrl2-release
MCRL2_TEST_DIR=$MYPWD/mcrl2-test
DEBIAN_PACKAGING_DIR=$MYPWD/debian-packaging

function clear_path
{
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/cvc3
}

#-----------------------------------------------------------#
# Download the mcrl2 release branch
#-----------------------------------------------------------#
function download_mcrl2_release
{
  cd $MYPWD
  rm -rf $MCRL2_ROOT
  git clone -b $MCRL2_RELEASE_BRANCH https://github.com/mcrl2org/mcrl2.git mcrl2
}

#-----------------------------------------------------------#
# Copy the debian packaging files
#-----------------------------------------------------------#
function prepare_debian_packaging
{
  cd $MYPWD
  rm -rf $DEBIAN_PACKAGING_DIR
  mkdir $DEBIAN_PACKAGING_DIR
  mkdir $DEBIAN_PACKAGING_DIR/mcrl2
  cp -r $MCRL2_ROOT/scripts/make_release/debian $DEBIAN_PACKAGING_DIR/mcrl2
  cp mcrl2-package/mcrl2-$MCRL2_VERSION.tar.gz $DEBIAN_PACKAGING_DIR/mcrl2_$MCRL2_VERSION.orig.tar.gz
}

#-----------------------------------------------------------#
# Simulate the PPA upload
#-----------------------------------------------------------#
function simulate_ppa_upload
{
  cd $MYPWD
  VERSION="$MCRL2_VERSION-$UBUNTU_VERSION~$1"
  cd $DEBIAN_PACKAGING_DIR
  dput -s ppa:mcrl2/release-ppa "mcrl2_${VERSION}_source.changes"
}

#-----------------------------------------------------------#
# Do the PPA upload
#-----------------------------------------------------------#
function do_ppa_upload
{
  cd $MYPWD
  VERSION="$MCRL2_VERSION-$UBUNTU_VERSION~$1"
  cd $DEBIAN_PACKAGING_DIR
  dput ppa:mcrl2/release-ppa "mcrl2_${VERSION}_source.changes"
}

#-----------------------------------------------------------#
# Build mcrl2-release
#-----------------------------------------------------------#
# N.B. A separate directory is used for building the release, since the MCRL2_ENABLE_TESTS may not be set.
function build_mcrl2_release
{
  clear_path
  rm -rf $MCRL2_RELEASE_DIR
  mkdir $MCRL2_RELEASE_DIR
  cd $MCRL2_RELEASE_DIR
  cmake $MCRL2_ROOT -Wno-dev -DCMAKE_BUILD_TYPE=Release -DMCRL2_ENABLE_EXPERIMENTAL=ON -DMCRL2_MAN_PAGES=ON -DCMAKE_INSTALL_PREFIX="`pwd`/install"
  make -j8
  make install
}

#-----------------------------------------------------------#
# Build mcrl2-test
#-----------------------------------------------------------#
# N.B. A separate directory is used for testing, since the MCRL2_ENABLE_TESTS needs to be set.
function build_mcrl2_test
{
  clear_path
  rm -rf $MCRL2_TEST_DIR
  mkdir $MCRL2_TEST_DIR
  cd $MCRL2_TEST_DIR
  cmake $MCRL2_ROOT -Wno-dev -DCMAKE_BUILD_TYPE=Release -DMCRL2_ENABLE_EXPERIMENTAL=ON -DMCRL2_MAN_PAGES=ON -DCMAKE_INSTALL_PREFIX="`pwd`/install" -DMCRL2_ENABLE_TESTS=ON
  make -j8
  make install
}

#-----------------------------------------------------------#
# Test mCRL2 in maintainer mode
#-----------------------------------------------------------#
function test_mcrl2_release
{
  clear_path
  cd $MCRL2_TEST_DIR
  export PATH=$MCRL2_TEST_DIR/install/bin:$PATH
  ctest -j8
}

#-----------------------------------------------------------#
# Build and upload the source package
#-----------------------------------------------------------#
function build_source_package
{
  cd $MYPWD
  rm -rf mcrl2-package
  mkdir mcrl2-package
  cd mcrl2-package
  cmake $MCRL2_ROOT -DMCRL2_PACKAGE_RELEASE="ON"
  make package_source
}

#-----------------------------------------------------------#
# Build debian package
#-----------------------------------------------------------#
function build_debian_package
{
  echo "-----------------------------------------------------"
  echo "- Create debian package for $1"
  echo "-----------------------------------------------------"
  export DEBEMAIL=$DEBEMAIL
  export DEBFULLNAME=$DEBFULLNAME
  if [ ! -f ~/pbuilder/$1-base.tgz ]
  then
      pbuilder-dist $1 create
  fi
  cd $DEBIAN_PACKAGING_DIR/mcrl2
  VERSION="$MCRL2_VERSION-$UBUNTU_VERSION~$1"
  dch -v $VERSION -D $1
  debuild -S -sa
}

#-----------------------------------------------------------#
# Test debian package
#-----------------------------------------------------------#
function test_debian_package
{
  echo "-----------------------------------------------------"
  echo "- Test debian package for $1"
  echo "-----------------------------------------------------"
  export DEBEMAIL=$DEBEMAIL
  export DEBFULLNAME=$DEBFULLNAME
  if [ ! -f ~/pbuilder/$1-base.tgz ]
  then
      pbuilder-dist $1 create
  fi
  cd $DEBIAN_PACKAGING_DIR/mcrl2
  VERSION="$MCRL2_VERSION-$UBUNTU_VERSION~$1"
  dch -v $VERSION -D $1 "New upstream release."
  debuild -S -sa

  cd ..

  # Copy the generated .dsc file. This is done because pbuilder-dist removes the signature from this file.
  cp "mcrl2_$VERSION.dsc" "mcrl2_$VERSION.dsc.bak"

  pbuilder-dist $1 build mcrl2_$VERSION.dsc --buildresult .
  lintian -i mcrl2_${VERSION}_amd64.deb

  # Restore the generated .dsc file
  cp "mcrl2_$VERSION.dsc.bak" "mcrl2_$VERSION.dsc"
}

function test_ppa_package
{
  prepare_debian_packaging
  test_debian_package $1
  simulate_ppa_upload $1
}

# N.B. Either run build_debian_package or test_debian_package. Otherwise in a later step GPG errors may occur!
function build_ppa_package
{
  prepare_debian_packaging
  build_debian_package $1 $2
  simulate_ppa_upload $1
  #do_ppa_upload $1
}

#--- Preparation ---#
#download_mcrl2_release
#build_mcrl2_release
#build_source_package

#test_ppa_package bionic
#test_ppa_package focalcd ../
#test_ppa_package groovy

#build_ppa_package bionic
#build_ppa_package focal
#build_ppa_package groovy
